{"componentChunkName":"component---src-compi-blog-js","path":"/blog/cloudflare-db/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Making of CloudflareDB\",\n  \"time\": 10,\n  \"date\": \"2021-02-21T00:00:00.000Z\",\n  \"description\": \"In this blog let's talk about CloudflareDB. It is the low latancy database using Cloudflare Workers and KV.\",\n  \"category\": \"Database\",\n  \"author\": \"Tuhin Kanti Pal\",\n  \"imgurl\": \"https://telegra.ph/file/b5b9e57be66e2a3ade262.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"In this blog let's talk about CloudflareDB. It is the low latancy database using Cloudflare Workers and KV.\"), mdx(\"p\", null, \"Cloudflare workers are based on Google's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://v8.dev/\",\n    \"title\": \"V8 Engine\"\n  }, \"V8 Engine\"), \". These are same like native vanilla javascript. (except \", mdx(\"code\", null, \"eval\"), \", \", mdx(\"code\", null, \"new Function\"), \", \", mdx(\"code\", null, \"Date.now()\"), \"). For something request on internet there are fetch API same as browser fetch. For database and storage there are Cloudflare worker KV.\"), mdx(\"h3\", null, \"So, let's code an API which is using Cloudflare's KV, it will store data and serve the stored data. \", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://github.com/cachecleanerjeet/CloudflareDB\",\n    \"title\": \"Source Code\"\n  }, \"Source Code available here\"), \".\"), mdx(\"h4\", null, \"Firstly let's Handel an incoming request:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"addEventListener('fetch', event => {\\n    event.respondWith(handleRequest(event.request))\\n})\\n\")), mdx(\"p\", null, \"As you can see here we give a reference of a function named handleRequest and passed the request.\"), mdx(\"h4\", null, \"handleRequest function will be an async function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"async function handleRequest(request) {\\n// Will be coded here\\n}\\n\")), mdx(\"p\", null, \"We are using POST for save a data. If browser send a POST request, it sends a preflight request (OPTIONS). We have to handle the request. He we create a if, else if, if function. If request method (request.method) is \\\"OPTIONS\\\" then will send a 200 status code along with some headers. We need to send the headers all time that's why we declare the headers, for each response the header will be sent. \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const headers = {\\n        \\\"Access-Control-Allow-Origin\\\": \\\"*\\\",\\n        \\\"Access-Control-Allow-Headers\\\": \\\"*\\\",\\n        \\\"Access-Control-Allow-Methods\\\": \\\"GET,POST,DELETE,OPTIONS\\\",\\n        \\\"Access-Control-Max-Age\\\": \\\"86400\\\",\\n        \\\"Content-Type\\\": \\\"application/json\\\",\\n        \\\"Cache-Control\\\": \\\"no-cache, no-store, must-revalidate\\\"\\n    }\\n\")), mdx(\"h4\", null, \"Okay! now Let's handle that \\\"OPTION\\\" Request\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"if (request.method == \\\"OPTIONS\\\") {\\n        return new Response(null, {\\n            status: 200,\\n            headers\\n        })\\n    }\\n\")), mdx(\"p\", null, \"Now, have to create a KV storage and bind the variable. Let's give \\\"TUHIN\\\" to variable name.\"), mdx(\"h3\", null, \"Let's handle the \\\"POST\\\" request\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"else if (request.method == \\\"POST\\\") {\\n        // Handle POST \\n    }\\n\")), mdx(\"p\", null, \"Here we have to receive the Payload DATA, Set an Unique ID and save the data into KV. If data received with \\\"_id\\\" object we will set the Unique ID insted of generate one. To generate an ID we fetch the GMT and add some random string with it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"else if (request.method == \\\"POST\\\") {\\n     var setpayload = await request.json()\\n     if (setpayload._id == undefined) {\\n         var keyid = (await (await fetch('https://time.akamai.com/')).text()) + Math.random().toString(36).substring(9)\\n     } else {\\n         var keyid = setpayload._id\\n     }\\n     await TUHIN.put(keyid, JSON.stringify(setpayload))\\n     return new Response(JSON.stringify({\\n         status: true,\\n         _id: keyid,\\n         query: `https://${request.headers.get(\\\"host\\\")}/${keyid}`,\\n         data: setpayload\\n     }), {\\n         status: 200,\\n         headers\\n     })\\n} \\n\")), mdx(\"h3\", null, \"Let's handle the \\\"GET\\\" request\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"else if (request.method == \\\"GET\\\") {\\n        // Handle GET \\n    }\\n\")), mdx(\"p\", null, \"Here we have to receive the path of the url, we will get the Unique ID from URL. After that we will GET the Data of that Unique ID (Key).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"else if (request.method == \\\"GET\\\") {\\n    var path = new URL(request.url).pathname\\n    var keyid = path.replace('/', '')\\n    var getpayload = await TUHIN.get(keyid)\\n    if (getpayload == null) {\\n        return new Response(JSON.stringify({\\n            status: false,\\n            message: \\\"Not Found\\\"\\n        }), {\\n            status: 200,\\n            headers\\n        })\\n    } else {\\n        return new Response(JSON.stringify({\\n            status: true,\\n            _id: keyid,\\n            data: JSON.parse(getpayload)\\n        }), {\\n            status: 200,\\n            headers\\n        })\\n    }\\n}\\n\")), mdx(\"h4\", null, \"Everything looks good, Now let's impliment a \\\"DELETE\\\" feature and complete the Database.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"else if (request.method == \\\"DELETE\\\") {\\n    await TUHIN.delete(path.replace('/', ''))\\n    return new Response(JSON.stringify({\\n        status: true,\\n        msg: \\\"Deleted Successfully\\\"\\n    }), {\\n        status: 200,\\n        headers\\n    })\\n}\\n\")), mdx(\"h3\", null, \"I implimented some extra features and the Final Output looks like \", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://github.com/cachecleanerjeet/CloudflareDB\",\n    \"title\": \"this\"\n  }, \"this\"), \".\"), mdx(\"h2\", null, \"Hope you loved it \\uD83D\\uDC97\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Making of CloudflareDB","author":"Tuhin Kanti Pal","imgurl":"https://telegra.ph/file/b5b9e57be66e2a3ade262.png","date":"21st February 2021"}}},"pageContext":{"id":"0b6212ed-3720-52e8-a79e-69bcccb462a7"}},"staticQueryHashes":[]}